---
const { title, classes, reviews = [] } = Astro.props;
import { LuChevronLeft } from "react-icons/lu";
import { LuChevronRight } from "react-icons/lu";
---

<section class=`testimonials ${classes}`>
  {title && <h2 class="header text-h3 font-noto-sans font-medium">{title}</h2>}
  <div id="testimonialCarousel" class="carousel">
    <!-- Testimonial items here -->
    <div class="testimonial-wrapper">
      {
        reviews.map((review, index) => {
          // Return JSX elements for each review, using template literals to insert data
          return (
            <div
              class={`testimonial-item *: ${index === 0 ? "active" : ""}`}
              data-index={index}
            >
              <p class="font-cursive font-normal p">"{review.text}"</p>
              <cite class="ml-auto p">{review.author}</cite>
            </div>
          );
        })
      }
    </div>

    <div class="controls">
      <LuChevronLeft id="prev" className="carousel-btn prev-btn text-black" />
      <!-- Navigation bubbles container -->
      <div class="carousel-nav">
        {
          reviews.map((review, index) => {
            return (
              <span
                class={"nav-dot " + (index == 0 && "active")}
                data-slide={index}
              />
            );
          })
        }
      </div>
      <LuChevronRight id="next" className="carousel-btn next-btn text-black" />
    </div>
  </div>
</section>

<script is:inline>
  var supportsPassive = false;
  try {
    var opts = Object.defineProperty({}, "passive", {
      get: function () {
        supportsPassive = true;
      },
    });
    window.addEventListener("testPassive", null, opts);
    window.removeEventListener("testPassive", null, opts);
  } catch (error) {}

  document.addEventListener("DOMContentLoaded", () => {
    let currentIndex = 0;
    const wrapper = document.querySelector(".testimonial-wrapper");
    const items = document.querySelectorAll(".testimonial-item");
    const dots = document.querySelectorAll(".nav-dot");
    const totalItems = items.length;
    let startX = 0;
    let currentX = 0;
    let moving = false;

    // const carousel = document.querySelector(".carousel");
    // console.log(carousel.offsetWidth);

    // Function to get the carousel's width
    const getCarouselWidth = () =>
      document.querySelector(".carousel").offsetWidth;

    // Function to update the carousel's position with or without animation
    const setCarouselPosition = (distance, animate = true) => {
      wrapper.style.transition = animate
        ? "transform 0.5s ease-in-out"
        : "none";
      wrapper.style.transform = `translateX(${distance}px)`;
    };

    // Adjusted to support infinite scrolling
    const finalizePosition = () => {
      const movedBy = currentX - startX;
      const threshold = getCarouselWidth() * 0.25; // Swipe threshold is 25% of the carousel width

      if (Math.abs(movedBy) > threshold) {
        if (movedBy < 0) {
          currentIndex = (currentIndex + 1) % totalItems; // Wraps to the first item if next from the last
        } else {
          currentIndex = (currentIndex - 1 + totalItems) % totalItems; // Wraps to the last item if prev from the first
        }
      }

      setCarouselPosition(-currentIndex * getCarouselWidth());
      updateActiveDot();
    };

    // Function to update the active dot
    const updateActiveDot = () => {
      dots.forEach((dot, index) => {
        dot.classList.toggle("active", index === currentIndex);
      });
    };

    // Touch handlers remain the same

    // Move to the next item with wrapping
    const moveNext = () => {
      currentIndex = (currentIndex + 1) % totalItems; // Ensures wrapping to the first item
      setCarouselPosition(-currentIndex * getCarouselWidth());
      updateActiveDot();
    };

    // Move to the previous item with wrapping
    const movePrev = () => {
      currentIndex = (currentIndex - 1 + totalItems) % totalItems; // Ensures wrapping to the last item
      setCarouselPosition(-currentIndex * getCarouselWidth());
      updateActiveDot();
    };

    // Add event listeners for swipe actions
    wrapper.addEventListener(
      "touchstart",
      (e) => {
        startX = e.touches[0].clientX;
        moving = true;
        wrapper.style.transition = "none";
      },
      supportsPassive ? { passive: true } : false
    );

    wrapper.addEventListener(
      "touchmove",
      (e) => {
        if (!moving) return;
        currentX = e.touches[0].clientX;
        const moveX = currentX - startX - currentIndex * getCarouselWidth();
        setCarouselPosition(moveX, false);
      },
      supportsPassive ? { passive: true } : false
    );

    wrapper.addEventListener("touchend", () => {
      moving = false;
      finalizePosition();
    });

    // Event listeners for next and prev buttons
    document.getElementById("next").addEventListener("click", moveNext);
    document.getElementById("prev").addEventListener("click", movePrev);

    // Update carousel position on window resize
    window.addEventListener("resize", () => {
      setCarouselPosition(-currentIndex * getCarouselWidth());
    });

    // Navigation dot clicks for direct access to slides
    dots.forEach((dot) => {
      dot.addEventListener("click", () => {
        currentIndex = parseInt(dot.getAttribute("data-slide"));
        setCarouselPosition(-currentIndex * getCarouselWidth());
        updateActiveDot();
      });
    });
  });
</script>
<style lang="scss">
  .testimonials {
    padding: 2rem 0;
  }
  .header {
    text-align: center;
    // max-width: 1000px;
    width: calc(100%);
    // padding: 0 5vw;
    margin: 0 auto;
  }
  .carousel {
    width: 100%;
    // max-width: 700px;
    margin: auto;
    overflow: hidden;
    position: relative; /* Ensures child positioning is relative to this container */
  }

  .testimonial-wrapper {
    display: flex;
    transition: transform 0.5s ease-in-out;
  }

  .testimonial-item {
    flex: 0 0 100%;
    text-align: center;
    padding: 32px 5vw;
    box-sizing: border-box;
    margin: auto 0;
    /* Ensure each item is tall enough or contains enough content */
    p {
      max-width: 1000px;
      margin: 0 auto;
    }
    @media (max-width: 768px) {
      padding: 5px;

      cite {
        margin: 0 auto;
        display: block;
        max-width: fit-content;
      }
      p {
        max-width: 100%;
        width: calc(100% - 1rem);
      }
    }
  }

  .carousel-btn {
    cursor: pointer;
    font-size: 2rem;
    color: black;
  }

  .controls {
    display: flex;
    align-items: center;
    margin: 0 auto;
    width: fit-content;
  }

  /* Style for the navigation dots */
  .carousel-nav {
    text-align: center;
    margin-top: 5px;
  }

  .nav-dot {
    height: 15px;
    width: 15px;
    background-color: #bbb;
    border-radius: 50%;
    display: inline-block;
    margin: 0 5px;
    cursor: pointer;
  }

  .nav-dot.active {
    background-color: #717171;
  }
</style>
